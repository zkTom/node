JSX语法注意点：
1.在render函数中不需要引号括起来（render(return (<div>hello world</div>)) ）
2.在render函数中引用自己的组建必须使用大写字母开头（render(<App />)）
3.使用state保存当前组建的数据状态，setState({})更新状态
4.在JSX中使用变量使用{}将js代码包裹在里面
5.state不允许我们做任何改变,只能通过setState进行数据跟新
6.props是单向数据流，如果要从自组建向父组件传值通过父组件向父组件传递函数来实现。
7.dangerouslySetInnerHtml 包传入的值进行HTML编译
8.PropTypes第三方包可以对父组件对子组件的传入值进行强校验
9.defaultProps可以对传入的props进行默认值设置
10.当state或者props发生改变的时候，render函数就会重新执行一遍，页面第一次加载的时候默认会执行一次(包括子组件）。父组件传递给子组件的props发生变化或者本身state改变，父组件的render函数重新执行，导致子组件都会重新执行render函数。
11. vdom
	11.1 state 数据
	11.2 JSX 模板
	11.3 生成vdom
		11.3.1 vdom: 模拟出一个VDOM（就是一个js对象）
		<div id="abc"><span>Hello world</span></div>
		对应的VDOM：['div', {id: 'abc'}, ['span', {}, 'hello world']]
	11.4 根据VDOM生成DOM
		11.4.1 <div id="abc"><span>Hello world</span></div>
	11.5 state 更新
	11.6 生成 新的vdom （节约很多性能）
		['div', {id: 'abc'}, ['span', {}, 'hello world']]
	11.7 比较新旧vdom，找出不同的数据节点
	11.8 直接操作DOM，改变span中的内容
12. 进一步了解vdom
	12.1 JSX => js 对象（通过render函数）=> 真实DOM
	12.2 React.createElement('div', {}, 'item') 把传入的js参数直接转化为真实DOM，可以绕过JSX
13. vdom 可以进行跨端操作（在浏览器中vdom => 真实DOM）React Native 
	（在Android中vdom => Android原始控件）
	（在IOS中也是类似的）
14. vdom进行比对时使用的diff算法
	14.1 state改变是新的vdom产生的根本原因，setState是异步执行的，可以对短时间内多次执行的setState方法进行合并，仅仅执行一次setState
	14.2 同层对比
	14.3 key值得应用使得key相同的两个同级节点可以进行快速匹配，从而节省性能，不要用Index作为key值，可能会不稳定，发生错位。
15. ref属性可以获取实际的DOM，但是可能会产生延迟，（setState是异步的）
16. React的生命周期
	16.1 生命周期函数： 会在组件的执行的某个时间点执行的函数。
	16.2 initalization: constructor => 设置state和prop
	16.3 mounting: componentWillMount 组件第一次挂载到页面上时触发
		16.3.1 mounting: render 使用产生的JSX产生vdom，根据vdom产生真实DOM，挂载到指定节点上
		16.3.2 mounting: componentDidMount 完成第一次页面挂载
	16.4 update： shouldComponentUpdate state或者props更新时，是否进行后续生命周期函数，
	return true会执行后续的生命周期函数，否则会截断后续的生命周期函数的执行
		16.4.1 update： componentWillUpdate 组件更新之前被调用，但是只有在shouldComponentUpdate 返回true才会执行
		16.4.2 update： render 执行render函数更新JSX产生新的vdom，和旧的vdom进行diff，更改真实DOM
		16.4.3 update： componentDidUpdate 组件更新完毕之后触发
	16.5 unmount: componentWillUnmount: 组件被销毁之前触发
17. 通过shouldComponentUpdate可以避免子组件多次渲染
18. ajax加载数据时机： componentDidMount
19. Charles模拟本地数据，也可以做借口代理
20. redux = reducer + flux
	store: （图书管理员，管理中心）
	creatAction: =>通过store.dispatch(action)向store中心提交数据（向图书管理员还书）
	const action = {
		type: '',//描述动作类型，
		value： '',//传递的值
	}
	reducer: 记录书籍存放位置信息
	subscribe： =>store.subscribe(cb) store中心向订阅过消息改变的组件，传递改变后的state树（向图书管理员借书）
21. store必须是唯一的
	只有store才可以改变自己的内容
	Reducer必须是纯函数

